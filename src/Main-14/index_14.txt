1-14. 배열과 포인터(1) 

 1. 배열
  (1)개념
   - 동일한 자료형으로 이뤄진 물리적으로 연속된공간
   - 배열을 구성하는 각각의 값을 배열요소라고 하며,
     배열에서의 위치를 가리키는 숫자는 인덱스이다.
   - 같은 종류의 데이터를 많이 다뤄야 하는 경우에 사용할수 있는 
     가장 기본적인 자료구조임
   - 배열은 선언되는 형식에 따라 1차원 배열, 2차원 배열(중첩 for문사용)
     뿐만 아니라, 그 이상의 다차원 배열로도 선언가능
	 
  (2) 선언
   - 1차원 배열 int       a    [5];
              자료형   배열명   개수 
   
   - 2차원 배열 int       a      [3][3];
              자료형    배열명   [행][열]
			  
  (3) 배열과 초기화
   - int arr[3]: 3개의 요소를 가지는 배열공간 생성함. 
   			     이떄 배열 공간에는 0값이 초기화됨
   - int arr[3] = {10,20,30} : 3개 요소를 가지는 배열공간을 생성하면서
   							초기값을 지정한다
   - int arr[] = {10,20,30} : 배열 크기를 생략하고 3개의 요소를 가지는 배열공간 생성
   - int arr[3][3]  : 3행 3열 9개의 요소를 가지는 배열공간 생성
   - int arr[3][3] = {1,2,3,4,5,6,7,8,9} : 9개의 공간에 순차적으로 초기값을 지정함
   - int arr[3][3] = {{1,2,3}{4,5,6}{7,8,9}} : 9개의 공간에 각 행에 맞춰 초기값 지정
      

 2. 포인터 변수
  (1) 개념
    - 변수의 메모리공간을 가리키는 변수다
	- 다른 변수를 가리키고 있는 변수다  (메모리 주소값 참조 가능)
	
  (2) 포인터 변수 선언
    - int *b
	- int *b = &a;
	
  (3) 장점
   - 메모리 주소를 참조하기 때문에 다양한 자료형 변수들의 접근과 조작이 수이무
   - 주소값을 참조(Call by Reference) 하기 때문에 전역변수 사용 억제 할수 있음
   - 배열,문자열같은 연속 데이터에 접근과 조작이 용이함 (보통 포인터쓸떄 이럴려고 씀)
   - 물리적인 메모리에 직접 접근이 가능하다. 

  (4) 단점
   - 버그찾기 힘들고, 다른 메모리 참조하는 오류 생길가능성 있음
   
3. 포인터 배열
  (1) 포인터 배열 개념
    - 배열 요소가 포인터(메모리주소)로 이뤄진 것이다.

  (2) 포인터 배열 선언
   - char *student[3] = {"aaa","bbb","ccc"};
	   메모리상 어딘가에 연속적으로 aaa, bbb, ccc가 들어갈것이다. 
	   20(번지수) a a a
	   30(번지수) b b b
	   40(번지수) c c c 
  
4. 배열 포인터
  (1) 개념
    - 배열 시작주소값을 저장할수 있는 포인ㅌ
	- 특정개수 열로 배열을 논리적으로 재구성함
	- 잘나오진 않음 (실무에서도 잘 안쓰이는 개념) 가끔가다 셤에 나옴
	
  (2) 배열포인터 선언
   - int (*in)[2];    -> 이렇게 생긴거는 배열포인터 선언한거임
    int num[3] = {1,2,3};
	in = num; 
   